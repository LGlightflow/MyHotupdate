#pragma once

#include "CoreMinimal.h"
#include "Settings/Core/ObjectStorageSettingsBase.h"
#include "ReUnrealPakSettingsEditor.generated.h"

class UVersionControlObject;

/*Packaged platform.*/
UENUM()
enum class EHotUpdateSettingsPlatform :uint8
{
	Windows,
	Linux,
	Mac,
	Android_ASTC,
	Android_DXT,
	Android_ETC2,
	Android_Multi,
	IOS,
	HTML5,
};

UCLASS(config = ReUpdateUnrealPakSettingsEditor)
class UReUnrealPakSettingsEditor : public UObjectStorageSettingsBase
{
	GENERATED_BODY()

public:
	UReUnrealPakSettingsEditor();

	UPROPERTY(Transient)
	TObjectPtr<UVersionControlObject> VersionControlObject;

	UPROPERTY(Transient,EditAnywhere, Category = VersionDiscardSettings, meta = (ToolTip = "You can customize the name of the main version. The version format is xx.xx.xx."))
	TMap<FString,bool> VersionDiscardSettings;
	// 版本号 a.b.c 推荐a是主版本号，b是小版本，c是补丁
	UPROPERTY(config, EditAnywhere, Category = VersionSettings, meta = (ToolTip = "You can customize the name of the main version. The version format is xx.xx.xx."))
	FName VersionName;
	//最大版本限制
	UPROPERTY(config, EditAnywhere, Category = VersionSettings, meta = (ToolTip = "This content is version base, which is used for automatic iteration."))
	int32 VersionMaximumBase;

	/*Where is the Pak stored after packing. */
	//打包好的Pak存放在(项目的)的位置
	UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (ToolTip = "Save the path of the generated Pak ."))
	FDirectoryPath PakSavePaths;

	/*Where is the log generated by Pak stored during packaging.*/
	//Pak log存放位置
	UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (ToolTip = "Save the path of the log ."))
	FDirectoryPath PakLogPaths;

	/*Select the platform to package.*/
	//打包平台
	UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (ToolTip = "Corresponding to the packaged platform, the default is windows ."))
	EHotUpdateSettingsPlatform PakPlatform;

	/*Is it a resource to cook or not to cook? Resources that do not cook are suitable for the editor to load .*/
	//是否是cook资源，运行时只能加载cooked后的资源
	UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (ToolTip = "Whether to type a good cooked resource ."))
	bool bCooked;

	/**
	* Whether to enable resource reference for packaging. If it is enabled, if the current package references other packages,
	* the resources of other packages will be sent into the current package .
	*/

	// 是否支持资源引用打包，例如打包单个资源，但是不清楚这个资源是否依赖其他资源，则开启此选项（mark一下，怎么解决未知）
	//UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (ToolTip = "Whether to obtain the dependent resources of the packaged resources during the packaging process and then package them ."))
	bool bReferenceAsset;

	/* Compressing the data results in smaller packetse .*/
	// 是否支持压缩
	UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (ToolTip = "You get a smaller package ."))
	bool bCompress;

	//mark一下
	UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (ToolTip = "Invoke PAK packaging internally without the need for a third party."))
	bool bInternalExecutionPak;

	/* Forces the encoding format bit utf8 of the current packet  .*/
	UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (ToolTip = "Strong conversion of encoding format to utf8 ."))
	bool bForceUTF8;

	/* Is it packaged in the order of UE4 resources .*/
	UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (ToolTip = "installed order"))
	bool bOrder;

	/* Do you want to turn on AES encryption .*/
	//AES加密资源
	UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (ToolTip = "AES encryption or not ."))
	bool bAES;

	/* AES encryption .*/
	UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (DisplayName = "Secret key", EditCondition = "bAES", ToolTip = "AES specific encryption value ."))
	FGuid AES;

	// RSA加密资源，在项目设置找Crypto
	UPROPERTY(config, EditAnywhere, Category = PakSettings, meta = (ToolTip = "AES encryption or not ."))
	bool bRSA;

public:
#if WITH_EDITOR
	virtual void PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent);
#endif

	FString GetPlatform() const;

	void BuildVersionToDiscard();
	void UploadDiscardedVersion();
};